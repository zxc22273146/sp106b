筆記
var lines = asmText.split(/\r?\n/);

將組合語言分割成一行一行
> \r:回車鍵Enter回到開頭
> \n:換行
> ?:比對前一個字元，0次或1次
> \r\n:在Windows中換行 
> \n:在Linux中換行

line.match(/^([^\/]*)(\/.*)?$/);
line = RegExp.$1.trim();

> match:為檢查函數
> /^ $/:比對的開頭及結尾位置
> [^\/]:不含"／"符號的字串
> ([^\/]*):比對[^\/]0次或多次
> (\/.*):比對"／"符號開頭的任意字串0次或多次
> ?:比對(\/.*)中的內容0次或1次
> RegExp.$1.trim():將比對的結果放入RegExp.$1並將字串前後空白消除

line.match(/^\(([^\)]+)\)$/)

將括號消除，例如(LOOP)變成LOOP
> +:比對前一個字元1次或多次

line.match(/^((([AMD]*)=)?([AMD01\+\-\&\|\!]*))(;(\w*))?$/)

判斷C指令
> [AMD]* AMD 0次或更多                        
> (([AMD]*)=)? AMD = 0次或一次
> ([AMD01\+\-\&\|\!]*) 
> A、M、D、0、1、+、-、&、|、!
> (\w*) 比對數字、字母、底線
> A = M
> D;JGT
> JGT

var d = dtable[p.d];
var cx = ctable[p.c];
var j = jtable[p.j];
    return 0b111<<13|cx<<6|d<<3|j;

> 先放入 111 並往左移 13 位，再放入Cx(共7位)往左移6位...以此類推
> _____________111
> 111_____________
> 111___________cx
> 111cx___________